plugins {
    id 'eclipse'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

group = 'tfc'
version = '2.1.1'

String gameVersion = '1.19.2'
String forgeVersion = "43.2.3"
String parchmentVersion = "2022.08.14-$gameVersion"

java {
    archivesBaseName = "smallerunits-$gameVersion-forge"
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'parchment', version: parchmentVersion

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                smallerunits {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                smallerunits {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                smallerunits {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'smallerunits', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                smallerunits {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://jitpack.io' }
    maven {
        name = "cursemaven"
        url = "https://www.cursemaven.com"
    }
    flatDir {
        dirs 'run/mods'
    }
}

static String transformLine(String line) {
    String[] split = line.split(":", 2)
    String left = split[0]
    if (left.startsWith("-"))
        left = left.substring(1)
    String right = split[1]

    return "curse.maven:" + left + "-" + right.trim().replace(" ", ":")
}

dependencies {
    minecraft "net.minecraftforge:forge:$gameVersion-$forgeVersion"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    FileInputStream stream = new FileInputStream("curse.yaml")
    byte[] data = stream.readAllBytes()
    stream.close()

    ArrayList<String> libraryLines = new ArrayList<>();

    String text = new String(data)
    for (String line : text.split("\n")) {
        if (line.startsWith("#")) continue
        if (line.trim().isEmpty()) continue

        if (line.trim().startsWith("-"))
            libraryLines.add(line)

        if (line.charAt(0) <= ' '.charAt(0)) {
            line = line.trim()

            boolean compileOnly = false
            if (line.startsWith("(") && line.endsWith(")")) {
                compileOnly = true
                line = line.substring(1, line.length() - 1)
            }

            String dep = transformLine(line)

            if (compileOnly) compileOnly fg.deobf(dep)
            else implementation fg.deobf(dep)

            System.out.println((String) ("|-| " + dep))
        } else {
            System.out.println((String) ("| " + line.replace(":", "")))
        }
    }

    System.out.println(": Libraries")
    for (String line : libraryLines) {
        line = line.trim()

        boolean compileOnly = false
        if (line.startsWith("(") && line.endsWith(")")) {
            compileOnly = true
            line = line.substring(1, line.length() - 1)
        }

        String dep = transformLine(line)

        if (compileOnly) compileOnly fg.deobf(dep)
        else implementation fg.deobf(dep)

        System.out.println((String) (":-| " + dep))
    }

    if (new File("run/mods/aa_do_not_rename_OptiFineDevTweaker-2.6.5-all.jar").exists()) {
        compileOnly files("run/mods/aa_do_not_rename_OptiFineDevTweaker-2.6.5-all.jar")
        compileOnly files("of/OptiFine_1.19.2_HD_U_I1-deobf.jar")
    }
}

mixin {
    add sourceSets.main, "smallerunits.refmap.json"
    config "smallerunits.mixins.json"
    debug.verbose = true
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "smallerunits",
                "Specification-Vendor"    : "GiantLuigi4",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "GiantLuigi4",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

// I debug stuff a lot, and I mess with ATs a lot
// everytime I change ATs, I need to reswap the game jar for the recomp jar
System.out.println("Swap for recomp jar")
String dir = project.getBuildDir().toString() + "/fg_cache/net/minecraftforge/forge";
File fl = new File((String) ("/$gameVersion-$forgeVersion" + "_mapped_parchment_$parchmentVersion"))
if (fl.exists()) {
    File fl1 = new File((String) (dir + "/$gameVersion-$forgeVersion" + "_mapped_parchment_$parchmentVersion/forge-$gameVersion-$forgeVersion" + "_mapped_parchment_$parchmentVersion" + ".jar"))
    File fl2 = new File((String) (dir + "/$gameVersion-$forgeVersion" + "_mapped_parchment_$parchmentVersion/forge-$gameVersion-$forgeVersion" + "_mapped_parchment_$parchmentVersion-recomp.jar"))
    if (fl2.exists()) {
        if (fl1.length() != fl2.length()) {
            if (fl1.exists())
                fl1.delete()

            FileInputStream inputStream = new FileInputStream(fl2)
            byte[] bytes = inputStream.readAllBytes()
            fl1.createNewFile()
            FileOutputStream outputStream = new FileOutputStream(fl1)
            outputStream.write(bytes)
            outputStream.flush()
            outputStream.close()
            inputStream.close()
        }
    }
}
System.out.println("Swapped")
