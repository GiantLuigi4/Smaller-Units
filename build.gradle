plugins {
    id 'eclipse'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

group = 'tfc'
version = '2.1.3'

String gameVersion = '1.19.2'
String forgeVersion = "43.2.3"
String parchmentVersion = "2022.08.14-$gameVersion"

java {
    archivesBaseName = "smallerunits-$gameVersion-forge"
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

class Vars {
    static CSV defaultRun
}

void init() {
    FileInputStream stream = new FileInputStream(project.file("yaml_gradle/runs/all.csv"))
    byte[] data = stream.readAllBytes()
    stream.close()
    Vars.defaultRun = new CSV(new String(data))
}

init()


import net.minecraftforge.gradle.common.util.RunConfig

void configure(String name, RunConfig cfg) {
    cfg.workingDirectory project.file('run')

    File fl = project.file("yaml_gradle/runs/" + name + ".csv")
    if (fl.exists()) {
        FileInputStream stream = new FileInputStream(fl)
        byte[] data = stream.readAllBytes()
        stream.close()
        CSV thisRun = new CSV(new String(data))

        for (String[] line : thisRun.text) cfg.property line[0], line[1]
    }

    for (String[] line : Vars.defaultRun.text) cfg.property line[0], line[1]

    cfg.mods {
        smallerunits {
            source sourceSets.main
        }
    }
}

minecraft {
    mappings channel: 'parchment', version: parchmentVersion

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client { configure("client", (RunConfig) it) }
        server { configure("server", (RunConfig) it) }
        gameTestServer { configure("gameTestServer", (RunConfig) it) }
        data { configure("data", (RunConfig) it) }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    FileInputStream stream = new FileInputStream(project.file("yaml_gradle/repositories.yaml"))
    byte[] data = stream.readAllBytes()
    stream.close()
    String text = new String(data)

    String parsing = ""
    for (String s : text.split("\n")) {
        if (s.trim().isEmpty()) continue

        String[] split = s.split(":", 2)
        if (split[0] == "flatdir") {
            flatDir {
                dirs split[1].trim()
            }
            continue
        }

        if (split[0].charAt(0) > ' '.charAt(0)) {
            parsing = split[0]
        } else {
            split[0] = split[0].trim()
            split[1] = split[1].trim().replace("\"", "")

            if (parsing == "maven") {
                maven {
                    name = split[0]
                    url = split[1]
                }
            }
        }
    }
}

static String transformLine(boolean isCompileOnly, String template, String name, String right) {
    if (isCompileOnly) name = name.substring(1, name.length() - 1)
    String t = template.replace('$l', name)
    String[] split = right.split(" ")
    for (int i = 0; i < split.length; i++)
        t = t.replace((String) ('$r' + i), split[i])
    return t.replace('"', "")
}

dependencies {
    minecraft "net.minecraftforge:forge:$gameVersion-$forgeVersion"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // TODO: parse dependencies.yaml
    FileInputStream stream = new FileInputStream(project.file("yaml_gradle/dependencies.yaml"))
    byte[] data = stream.readAllBytes()
    stream.close()
    Yaml deps = new Yaml(new String(data))

    ArrayList<Object[]> libraryLines = new ArrayList<>();

    for (String s : deps.keys()) {
        Yaml entry = deps.getYaml(s)

        boolean isDeobf = Boolean.parseBoolean(entry.getText("deobf"))
        String template = entry.getText("template")

        stream = new FileInputStream(project.file("yaml_gradle/" + entry.getText("file").replace('"', "")))
        data = stream.readAllBytes()
        stream.close()
        Yaml fl = new Yaml(new String(data))

        for (String key : fl.keys()) {
            System.out.println((String) ("| " + key))

            Yaml depYaml = fl.getYaml(key)
            for (String name : depYaml.keys()) {
                if (name.startsWith("-")) {
                    libraryLines.add(new Object[]{depYaml, template, name, Boolean.valueOf(isDeobf)})
                    continue
                }

                boolean isCompileOnly = name.charAt(0) == '('.charAt(0) && name.charAt(name.length() - 1) == ')'.charAt(0)
                String dep = transformLine(isCompileOnly, template, name, depYaml.getText(name))
                System.out.println((String) ("|-| " + dep))
                if (isDeobf) {
                    if (isCompileOnly) compileOnly fg.deobf(dep)
                    else implementation fg.deobf(dep)
                } else {
                    if (isCompileOnly) compileOnly dep
                    else implementation dep
                }
            }
        }
    }

    System.out.println(": Libraries")
    for (Object[] line : libraryLines) {
        Yaml depYaml = (Yaml) line[0]
        String template = (String) line[1]
        String name = ((String) line[2])
        boolean isDeobf = ((Boolean) line[3]).booleanValue()

        boolean isCompileOnly = name.charAt(0) == '('.charAt(0) && name.charAt(name.length() - 1) == ')'.charAt(0)
        String dep = transformLine(isCompileOnly, template, name.substring(1), depYaml.getText(name))
        System.out.println((String) (":-| " + dep))
        if (isDeobf) {
            if (isCompileOnly) compileOnly fg.deobf(dep)
            else implementation fg.deobf(dep)
        } else {
            if (isCompileOnly) compileOnly dep
            else implementation dep
        }
    }

    if (new File("run/mods/aa_do_not_rename_OptiFineDevTweaker-2.6.5-all.jar").exists()) {
        compileOnly files("run/mods/aa_do_not_rename_OptiFineDevTweaker-2.6.5-all.jar")
        compileOnly files("of/OptiFine_1.19.2_HD_U_I1-deobf.jar")
    }
}

mixin {
    add sourceSets.main, "smallerunits.refmap.json"
    config "smallerunits.mixins.json"
    debug.verbose = true
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "smallerunits",
                "Specification-Vendor"    : "GiantLuigi4",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "GiantLuigi4",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

// I debug stuff a lot, and I mess with ATs a lot
// everytime I change ATs, I need to reswap the game jar for the recomp jar
System.out.println("Swap for recomp jar")
String dir = project.getBuildDir().toString() + "/fg_cache/net/minecraftforge/forge";
File fl = new File((String) ("/$gameVersion-$forgeVersion" + "_mapped_parchment_$parchmentVersion"))
if (fl.exists()) {
    File fl1 = new File((String) (dir + "/$gameVersion-$forgeVersion" + "_mapped_parchment_$parchmentVersion/forge-$gameVersion-$forgeVersion" + "_mapped_parchment_$parchmentVersion" + ".jar"))
    File fl2 = new File((String) (dir + "/$gameVersion-$forgeVersion" + "_mapped_parchment_$parchmentVersion/forge-$gameVersion-$forgeVersion" + "_mapped_parchment_$parchmentVersion-recomp.jar"))
    if (fl2.exists()) {
        if (fl1.length() != fl2.length()) {
            if (fl1.exists())
                fl1.delete()

            FileInputStream inputStream = new FileInputStream(fl2)
            byte[] bytes = inputStream.readAllBytes()
            fl1.createNewFile()
            FileOutputStream outputStream = new FileOutputStream(fl1)
            outputStream.write(bytes)
            outputStream.flush()
            outputStream.close()
            inputStream.close()
        }
    }
}
System.out.println("Swapped")

class CSV {
    public String[][] text

    CSV(String[][] text) {
        this.text = text
    }

    CSV(String text) {
        ArrayList<String[]> lines = new ArrayList<>();
        for (String s : text.split("\n"))
            if (!s.isEmpty())
                lines.add(s.split(","))
        this.text = lines.toArray(new String[0][])
    }
}

abstract class YamlEntry {}

class YamlString extends YamlEntry {
    String value

    YamlString(String value) {
        this.value = value
    }

    @Override
    String toString() {
        return value
    }
}

class Yaml extends YamlEntry {
    Map<String, YamlEntry> entries = new HashMap<>()

    Set<String> keys() {
        return entries.keySet()
    }

    Yaml getYaml(String key) {
        try {
            return (Yaml) entries.get(key)
        } catch (Throwable err) {
            System.out.println("Failed to get entry " + key)
            throw new RuntimeException()
        }
    }

    String getText(String key) {
        return entries.get(key).toString()
    }

    static int countIndent(String line) {
        for (int i = 0; i < line.length(); i++) {
            if (line.charAt(i) > ' '.charAt(0))
                return i
        }
        return line.length()
    }

    Yaml(String[] text, int indent, int[] currentLine) {
        for (int i = currentLine[0]; i < text.length; i++) {
            if (text[i].trim().isEmpty()) continue
            if (text[i].trim().charAt(0) == '#'.charAt(0)) continue

            if (countIndent(text[i]) < indent) {
                currentLine[0] = i
                return
            }

            String[] split = text[i].trim().split(":", 2)
            if (split.length == 1 || split[1].isEmpty()) {
                i += 1
                currentLine[0] = i
                Yaml subYaml = new Yaml(text, countIndent(text[i]), currentLine)
                i = currentLine[0] - 1

                entries.put(split[0], subYaml)
            } else {
                entries.put(split[0], new YamlString(split[1].trim()))
            }

            currentLine[0] = i
        }
        currentLine[0] += 1
    }

    Yaml(String text) {
        this(text.split("\n"), 0, new int[]{0})
    }
}
