import java.util.function.Consumer

plugins {
    id 'fabric-loom' version '1.1-SNAPSHOT'
//    id 'org.quiltmc.loom' version '1.0.+'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

/* loom */
loom {
    loom.accessWidenerPath = file("src/main/resources/smallerunits.accesswidener")
    loom.mixin.defaultRefmapName = "smallerunits.refmap.json"
}

/* repositories */
filteredMaven "https://maven.jamieswhiteshirt.com/libs-release", "com.jamieswhiteshirt"
filteredMaven "https://cursemaven.com", "curse.maven"
filteredMaven "https://api.modrinth.com/maven", "maven.modrinth"
maven "https://repo1.maven.org/maven2/"
maven "https://ladysnake.jfrog.io/artifactory/mods"
maven "https://jitpack.io"
maven "https://maven.architectury.dev/"
maven "https://maven.quiltmc.org/repository/release"

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

String ccaVersion = "4.2.0"

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    /* dependencies */
    DependencyTemplate cca = template (text) -> { modImplementation text
    }, "dev.onyxstudios.cardinal-components-api:cardinal-components-\$module:$ccaVersion"
    cca.apply "module=base"
    cca.apply "module=world"
    cca.apply "module=chunk"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    include modImplementation("com.jamieswhiteshirt:reach-entity-attributes:2.2.0")

    /* soft-deps */
    curse "alternate_current", "548115", "4406078"
    curse "pehkui", "319596", "4408057"
    curseCompile "scopic", "665350", "4359710"
    curseCompile "flan", "404578", "4464887"
    curse "cloth_config", "348521", "3972425"
    curse "mod_menu", "308702", "4145213"
    curse "chiselandbits", "561059", "4119189"
    curse "bitsandchisel", "420709", "3841573"
    modImplementation "me.shedaniel.cloth:basic-math:0.6.1"

    curseCompile "vivecraft", "667903", "4409424"
    // TODO: is there a fabric equivalent?
    curseCompile "vfe", "325360", "3893747"

    modCompileOnly "maven.modrinth:lithium:mc1.18.2-0.10.3"
    modCompileOnly "maven.modrinth:sodium:mc1.18.2-0.4.1"
    modCompileOnly "maven.modrinth:indium:1.0.7+mc1.18.2"
    modCompileOnly "maven.modrinth:iris:1.18.x-v1.4.0"

    modImplementation "maven.modrinth:immersiveportals:1.4.11-1.18.2"
    modImplementation('com.github.iPortalTeam.ImmersivePortalsMod:imm_ptl_core:v1.4.11-1.18') {
        exclude(group: "net.fabricmc.fabric-api")
        transitive(false)
    }
    modImplementation('com.github.iPortalTeam.ImmersivePortalsMod:q_misc_util:v1.4.11-1.18') {
        exclude(group: "net.fabricmc.fabric-api")
        transitive(false)
    }

    for (File f : new File("libs").listFiles())
        if (!f.isDirectory())
            implementation files(f)
    for (File f : new File("libs/deobf").listFiles())
        modImplementation files(f)

    modImplementation("com.github.Virtuoel:KanosConfig:0.3.1", {
        exclude group: "net.fabricmc", module: "fabric-loader"
        exclude group: "net.fabricmc.fabric-api"
    })

    implementation "org.joml:joml:1.10.5"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

void maven(String s) {
    repositories.maven { url = s }
}

void maven(String s, String... groups) {
    repositories.maven {
        url = s
        content {
            for (String g : groups) {
                includeGroup(g)
            }
        }
    }
}

void filteredMaven(String s, String... groups) {
    repositories.exclusiveContent {
        forRepository {
            repositories.maven {
                url = s
            }
        }
        filter {
            for (String g : groups) {
                includeGroup(g)
            }
        }
    }
}

class DependencyTemplate {
    String url
    Consumer<String> artifactApplier

    DependencyTemplate(Consumer<String> artifactApplier, String url) {
        this.url = url
        this.artifactApplier = artifactApplier
    }

    void apply(String... replacements) {
        String r = url
        for (String s : replacements) {
            String[] split = s.split("=")
            r = r.replace((String) ("\$" + split[0]), split[1])
        }
        artifactApplier.accept(r)
    }
}

DependencyTemplate template(Consumer<String> artifactApplier, String txt) {
    return new DependencyTemplate(artifactApplier, txt)
}

void curse(String name, String projId, String fileId) {
    dependencies.modImplementation "curse.maven:$name-$projId:$fileId"
}

void curseCompile(String name, String projId, String fileId) {
    dependencies.modCompileOnly "curse.maven:$name-$projId:$fileId"
}
